import os
import numpy as np
import librosa
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM

# Load audio file and extract spectrogram features
def extract_features(file_name):
  audio, sample_rate = librosa.load(file_name)
  spectrogram = librosa.feature.melspectrogram(audio, sr=sample_rate)
  spectrogram = librosa.power_to_db(spectrogram)
  spectrogram = spectrogram.reshape(1, spectrogram.shape[0], spectrogram.shape[1])
  return spectrogram

# Generate training data
X_train = []
y_train = []

# Load cry audio files
cry_dir = '//content/deep.wav'
for filename in os.listdir(cry_dir):
  file_path = os.path.join(cry_dir, filename)
  X_train.append(extract_features(file_path))
  y_train.append(1)

# Load non-cry audio files
non_cry_dir = '/content/deep.wav'
for filename in os.listdir(non_cry_dir):
  file_path = os.path.join(non_cry_dir, filename)
  X_train.append(extract_features(file_path))
  y_train.append(0)

X_train = np.array(X_train)
y_train = np.array(y_train)

# Build CNN + LSTM model
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(X_train.shape[1], X_train.shape[2], 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(LSTM(50, return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Make predictions
features = extract_features('/content/deep.wav')
model.predict(features) > 0.5 # Predict cry

